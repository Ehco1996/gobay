package app

import (
	"context"
	// "{{ $.Url }}/gen/schema"
	// "github.com/facebookincubator/ent/dialect"
	"github.com/go-redis/redis"
	_ "github.com/go-sql-driver/mysql"
	"github.com/shanbay/gobay"
{{- if not $.SkipAsyncTask }}
	"github.com/shanbay/gobay/extensions/asynctaskext"
{{- end }}
	"github.com/shanbay/gobay/extensions/cachext"
	_ "github.com/shanbay/gobay/extensions/cachext/backend/redis"
	"github.com/shanbay/gobay/extensions/entext"
	"github.com/shanbay/gobay/extensions/esapmext"
	"github.com/shanbay/gobay/extensions/redisext"
{{- if not $.SkipSentry }}
	"github.com/shanbay/gobay/extensions/sentryext"
{{- end }}
	"github.com/shanbay/gobay/extensions/seqgenext"
	"go.elastic.co/apm"
	_ "go.elastic.co/apm/module/apmsql/mysql"
)

// Extensions defined Extensions to be used by init app
func Extensions() map[gobay.Key]gobay.Extension {
	return map[gobay.Key]gobay.Extension{
		"redis":  &redisext.RedisExt{NS: "redis_"},
		"seqgen": &seqgenext.SequenceGeneratorExt{NS: "seqgen_", RedisExtName: "redis"},
{{- if not $.SkipSentry }}
		"sentry": &sentryext.SentryExt{NS: "sentry_"},
{{- end }}
		"cache": &cachext.CacheExt{NS: "cache_"},
		"apm":   &esapmext.EsApmExt{},
		"entext": &entext.EntExt{
			NS: "db_",
			// NewClient: func(opt interface{}) entext.Client {
			// 	return schema.NewClient(opt.(schema.Option))
			// },
			// Driver: func(drv dialect.Driver) interface{} {
			// 	return schema.Driver(drv)
			// },
		},
{{- if not $.SkipAsyncTask }}
		"asyncTask": &asynctaskext.AsyncTaskExt{NS: "asynctask_"},
{{- end }}
	}
}

var (
	Redis     *redis.Client
	Seqgen    *seqgenext.SequenceGeneratorExt
{{- if not $.SkipSentry }}
	Sentry    *sentryext.SentryExt
{{- end }}
	Cache     *cachext.CacheExt
	ApmTracer *apm.Tracer
{{- if not $.SkipAsyncTask }}
	AsyncTask *asynctaskext.AsyncTaskExt
{{- end }}
	// EntClient *schema.Client
)

func InitExts(app *gobay.Application) {
	// EntClient = app.Get("entext").Object().(*schema.Client)
	Redis = app.Get("redis").Object().(*redis.Client)
	Seqgen = app.Get("seqgen").Object().(*seqgenext.SequenceGeneratorExt)
{{- if not $.SkipSentry }}
	Sentry = app.Get("sentry").Object().(*sentryext.SentryExt)
{{- end }}
	Cache = app.Get("cache").Object().(*cachext.CacheExt)
	ApmTracer = app.Get("apm").Object().(*apm.Tracer)
{{- if not $.SkipAsyncTask }}
	AsyncTask = app.Get("asyncTask").Object().(*asynctaskext.AsyncTaskExt)
{{- end }}
}

func GetApmCache(ctx context.Context) *cachext.CacheExt {
	return Cache.WithContext(ctx)
}
