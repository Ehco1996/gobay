package appopenapi

import (
	"github.com/go-openapi/runtime/middleware"
	"{{ $.Url }}/gen/openapi/restapi/operations/health"
	"{{ $.Url }}/app"
	"github.com/shanbay/gobay"
)

type {{ toLowerCamel $.Name }}Server struct {
	app *gobay.Application
}

func (s *{{ toLowerCamel $.Name }}Server) healthCheckHealthHandler() health.HealthCheckHandler {
	return health.HealthCheckHandlerFunc(func(params health.HealthCheckParams) middleware.Responder {
		if params.Type == nil {
			return health.NewHealthCheckNotFound()
		}
		check_type := *params.Type
		if check_type == "liveness" || check_type == "readiness" {
			ctx := params.HTTPRequest.Context()
			// if app.EntExt != nil {
			// 	if err := app.EntClient.CheckHealth(ctx); err != nil {
			// 		return health.NewHealthCheckNotFound()
			// 	}
			// }
	
			if app.Redis != nil {
				if err := app.Redis.CheckHealth(ctx); err != nil {
					return health.NewHealthCheckNotFound()
				}
			}
	
			if app.Cache != nil {
				if err := app.Cache.CheckHealth(ctx); err != nil {
					return health.NewHealthCheckNotFound()
				}
			}
			return health.NewHealthCheckOK()
		} else {
			return health.NewHealthCheckNotFound()
		}
	})
}
