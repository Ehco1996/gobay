package appopenapi

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"net/http"

	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime/middleware"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/shanbay/gobay"
	"github.com/shanbay/gobay/openapi"

	"go.elastic.co/apm/module/apmhttp"

	myapp "{{ $.Url }}/app"
	"{{ $.Url }}/app/models"
	"{{ $.Url }}/gen/openapi/restapi"
	"{{ $.Url }}/gen/openapi/restapi/operations"
)

// Serve serve OpenAPI http server
func Serve(app *gobay.Application) error {
	myapp.InitExts(app)

	config := app.Config()

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		return err
	}

	api := operations.New{{ toCamel $.Name }}API(swaggerSpec)
	server := restapi.NewServer(api)

	server.Host = config.GetString("openapi_listen_host")
	server.Port = config.GetInt("openapi_listen_port")

	enableAPM := config.GetBool("elastic_apm_enable")
	configureAPI(server, api, &{{ toLowerCamel $.Name }}Server{app: app}, enableAPM)

	// 启动 prometheus handler
	promSrv := http.Server{Addr: ":9000"}
	go func() {
		http.Handle("/metrics", promhttp.Handler())
		if err := promSrv.ListenAndServe(); err != nil {
			log.Fatalf("error when start prometheus server: %v\n", err)
		}
	}()

	// 启动 http server
	stopchan := make(chan os.Signal, 1)
	signal.Notify(stopchan, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)

	go func(c <-chan os.Signal) {
		<-c
		err := server.Shutdown()
		if err != nil {
			log.Fatalf("error when shutdown api server: %v\n", err)
		}
		if err := promSrv.Shutdown(context.Background()); err != nil {
			log.Fatalf("error when shutdown api server: %v\n", err)
		}
	}(stopchan)

	if err := server.Serve(); err != nil {
		return err
	}

	return nil

}

func configureAPI(s *restapi.Server, api *operations.{{ $camelName }}API, impls *{{ toLowerCamel $.Name }}Server) {
	// 加载实现 server 的 api handler
	// api.SvcExampleHandler = impls.svcExampleHandler()

	gmw := openapi.ChainMiddlewares(
	// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
	// So this is a good place to plug in a panic handling middleware, logging and metrics
	)

	// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	mdwBuilders := []middleware.Builder{}
	if enableApm {
		mdwBuilders = append(
			mdwBuilders,
			func(handler http.Handler) http.Handler {
				return apmhttp.Wrap(handler, apmhttp.WithTracer(myapp.ApmTracer))
			},
		)
	}
	s.SetHandler(gmw(api.Serve(openapi.ChainMiddlewares(mdwBuilders...))))
}
